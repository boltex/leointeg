{
  "name": "leointeg",
  "displayName": "Leo Editor Integration with Visual Studio Code",
  "description": "Use Leo, the literate editor with outline, directly in vscode.",
  "version": "0.1.7",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/boltex/leointeg"
  },
  "engines": {
    "vscode": "^1.39.0"
  },
  "keywords": [
    "leo",
    "literate",
    "outline",
    "programming",
    "editor"
  ],
  "categories": [
    "Other"
  ],
  "activationEvents": [
    "onView:leoIntegration",
    "workspaceContains:**/*.leo"
  ],
  "main": "./out/extension.js",
  "icon": "resources/leoapp128px.png",
  "galleryBanner": {
    "color": "#fffbdc",
    "theme": "light"
  },
  "contributes": {
    "configuration": {
      "title": "Leo Integration",
      "properties": {
        "leoIntegration.treeKeepFocus": {
          "scope": "application",
          "default": true,
          "type": "boolean",
          "description": "Specifies whether to keep focus in the outline when selecting a node"
        },
        "leoIntegration.treeKeepFocusWhenAside": {
          "scope": "application",
          "default": false,
          "type": "boolean",
          "description": "Specifies whether to keep focus in the outline when opening a body pane on the side"
        },
        "leoIntegration.treeInExplorer": {
          "scope": "application",
          "default": true,
          "type": "boolean",
          "description": "Show the outline tree in the explorer view"
        },
        "leoIntegration.showOpenAside": {
          "scope": "application",
          "default": true,
          "type": "boolean",
          "description": "Offer 'Open to the Side' in nodes context menu"
        },
        "leoIntegration.bodyEditDelay": {
          "scope": "application",
          "type": "number",
          "default": 500,
          "minimum": 250,
          "maximum": 1000,
          "description": "Specifies delay time for edits to be sent to Leo, in milliseconds"
        },
        "leoIntegration.leoPythonCommand": {
          "scope": "application",
          "default": "",
          "type": "string",
          "description": "Specifies the command to start python (Defaults to 'py' on windows and 'python3' otherwise)"
        },
        "leoIntegration.startServerAutomatically": {
          "scope": "application",
          "default": false,
          "type": "boolean",
          "description": "Starts a LeoBridge server, either with a specified command, or the default command to run the 'leobridgeserver.py' python3 script"
        },
        "leoIntegration.connectToServerAutomatically": {
          "scope": "application",
          "default": false,
          "type": "boolean",
          "description": "Connect automatically to a Leo server on specified 'Connection Port' upon activation of this expansion"
        },
        "leoIntegration.connectionAdress": {
          "default": "localhost",
          "scope": "application",
          "type": "string",
          "description": "Connection host"
        },
        "leoIntegration.connectionPort": {
          "default": 32125,
          "scope": "application",
          "minimum": 0,
          "maximum": 65535,
          "type": "number",
          "description": "Connection port"
        }
      }
    },
    "viewsContainers": {
      "activitybar": [
        {
          "id": "leoIntegrationView",
          "title": "Leo",
          "icon": "resources/icon.svg"
        }
      ]
    },
    "views": {
      "explorer": [
        {
          "id": "leoIntegrationExplorer",
          "name": "Leo Outline",
          "when": "treeInExplorer==true && !leoDisconnected"
        }
      ],
      "leoIntegrationView": [
        {
          "id": "leoIntegration",
          "name": "Outline",
          "when": "!leoDisconnected"
        }
      ]
    },
    "commands": [
      {
        "command": "leointeg.connectToServer",
        "title": "Connect to Leo Bridge server",
        "icon": {
          "light": "resources/light/connect.svg",
          "dark": "resources/dark/connect.svg"
        }
      },
      {
        "command": "leointeg.openLeoFile",
        "title": "Open Leo File",
        "icon": {
          "light": "resources/light/folder.svg",
          "dark": "resources/dark/folder.svg"
        }
      },
      {
        "command": "leointeg.closeLeoFile",
        "title": "Close Leo File",
        "icon": {
          "light": "resources/light/close.svg",
          "dark": "resources/dark/close.svg"
        }
      },
      {
        "command": "leointeg.startServer",
        "title": "Start Leo Bridge Server"
      },
      {
        "command": "leointeg.test",
        "title": "Test Leo Integration"
      },
      {
        "command": "leointeg.editHeadline",
        "title": "Edit Headline",
        "icon": {
          "light": "resources/light/edit.svg",
          "dark": "resources/dark/edit.svg"
        }
      },
      {
        "command": "leointeg.openAside",
        "title": "Open to the Side"
      },
      {
        "command": "leointeg.mark",
        "title": "Mark"
      },
      {
        "command": "leointeg.unmark",
        "title": "Unmark"
      },
      {
        "command": "leointeg.copyNode",
        "title": "Copy Node"
      },
      {
        "command": "leointeg.cutNode",
        "title": "Cut Node"
      },
      {
        "command": "leointeg.pasteNode",
        "title": "Paste Node"
      },
      {
        "command": "leointeg.pasteNodeAsClone",
        "title": "Paste Node as Clone"
      },
      {
        "command": "leointeg.delete",
        "title": "Delete"
      },
      {
        "command": "leointeg.moveOutlineDown",
        "title": "Move Outline Down"
      },
      {
        "command": "leointeg.moveOutlineLeft",
        "title": "Move Outline Left"
      },
      {
        "command": "leointeg.moveOutlineRight",
        "title": "Move Outline Right"
      },
      {
        "command": "leointeg.moveOutlineUp",
        "title": "Move Outline Up"
      },
      {
        "command": "leointeg.insertNode",
        "title": "Insert Node"
      },
      {
        "command": "leointeg.cloneNode",
        "title": "Clone Node"
      },
      {
        "command": "leointeg.promote",
        "title": "Promote"
      },
      {
        "command": "leointeg.demode",
        "title": "Demote"
      },
      {
        "command": "leointeg.undo",
        "title": "Undo"
      },
      {
        "command": "leointeg.executeScript",
        "title": "Execute Script"
      },
      {
        "command": "leointeg.saveFile",
        "title": "Save Leo File"
      }
    ],
    "menus": {
      "commandPalette": [
        {
          "command": "leointeg.startServer",
          "when": "!leoBridgeReady && !leoTreeOpened && !leoServerStarted"
        },
        {
          "command": "leointeg.connectToServer",
          "when": "!leoBridgeReady && !leoTreeOpened && !leoDisconnected"
        },
        {
          "command": "leointeg.openLeoFile",
          "when": "leoBridgeReady==true && !leoTreeOpened"
        },
        {
          "command": "leointeg.closeLeoFile",
          "when": "leoTreeOpened==true"
        }
      ],
      "view/title": [
        {
          "command": "leointeg.connectToServer",
          "when": "!leoBridgeReady && !leoTreeOpened && !leoDisconnected",
          "group": "navigation"
        },
        {
          "command": "leointeg.openLeoFile",
          "when": "leoBridgeReady==true && !leoTreeOpened",
          "group": "navigation"
        },
        {
          "command": "leointeg.closeLeoFile",
          "when": "leoTreeOpened==true",
          "group": "navigation"
        },
        {
          "command": "leointeg.saveFile",
          "when": "leoTreeOpened==true"
        },
        {
          "command": "leointeg.undo",
          "when": "leoTreeOpened==true"
        },
        {
          "command": "leointeg.executeScript",
          "when": "leoTreeOpened==true"
        }
      ],
      "view/item/context": [
        {
          "command": "leointeg.editHeadline",
          "when": "viewItem =~ /leoNode/",
          "group": "inline"
        },
        {
          "command": "leointeg.openAside",
          "when": "showOpenAside == true && viewItem =~ /leoNode/",
          "group": "leoNodeContext1@1"
        },
        {
          "command": "leointeg.mark",
          "when": "viewItem == leoNode",
          "group": "leoNodeContext2@1"
        },
        {
          "command": "leointeg.unmark",
          "when": "viewItem == leoNodeMarked",
          "group": "leoNodeContext2@2"
        },
        {
          "command": "leointeg.copyNode",
          "when": "viewItem =~ /leoNode/",
          "group": "leoNodeContext2@3"
        },
        {
          "command": "leointeg.cutNode",
          "when": "viewItem =~ /leoNode/",
          "group": "leoNodeContext2@4"
        },
        {
          "command": "leointeg.pasteNode",
          "when": "viewItem =~ /leoNode/",
          "group": "leoNodeContext2@5"
        },
        {
          "command": "leointeg.pasteNodeAsClone",
          "when": "viewItem =~ /leoNode/",
          "group": "leoNodeContext2@6"
        },
        {
          "command": "leointeg.delete",
          "when": "viewItem =~ /leoNode/",
          "group": "leoNodeContext2@7"
        },
        {
          "command": "leointeg.insertNode",
          "when": "leoTreeOpened==true",
          "group": "leoNodeContext3@1"
        },
        {
          "command": "leointeg.cloneNode",
          "when": "leoTreeOpened==true",
          "group": "leoNodeContext3@2"
        },
        {
          "command": "leointeg.promote",
          "when": "leoTreeOpened==true",
          "group": "leoNodeContext3@3"
        },
        {
          "command": "leointeg.demode",
          "when": "leoTreeOpened==true",
          "group": "leoNodeContext3@4"
        }
      ]
    },
    "resourceLabelFormatters": [
      {
        "scheme": "leo",
        "formatting": {
          "label": "LEO: BODY",
          "separator": "/",
          "workspaceSuffix": ""
        }
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile",
    "test": "node ./out/test/runTest.js"
  },
  "devDependencies": {
    "@types/glob": "^7.1.1",
    "@types/mocha": "^5.2.6",
    "@types/node": "^10.12.21",
    "@types/vscode": "^1.38.0",
    "@types/ws": "^6.0.0",
    "@types/which": "^1.3.2",
    "glob": "^7.1.4",
    "mocha": "^6.1.4",
    "typescript": "^3.3.1",
    "tslint": "^5.12.1",
    "vscode-test": "^1.0.2"
  },
  "dependencies": {
    "hasbin": "^1.2.3",
    "which": "^1.3.0",
    "ws": "^6.0.0"
  }
}